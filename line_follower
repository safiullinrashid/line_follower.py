import pygame
import math
import numpy as np

width = 800
height = 600

target_level = 45

prop_gain = 0.75
diff_gain = 1.0
int_gain = 0.65

speed = 12
time_step = 0.015

fps = 60

color_blue = (25, 130, 240)
color_green = (50, 160, 100)
color_white = (250, 250, 250)

pygame.init()
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Робот-слежение")
font = pygame.font.Font(None, 30)

class Bot:
    def __init__(self, xpos, ypos, angle):
        self.x = xpos
        self.y = ypos
        self.angle = angle
        self.velocity = speed
        self.rotation_speed = 0

    def read_sensor(self):
        return 45 + 25 * math.sin(pygame.time.get_ticks() * 0.004)

    def update_motion(self, error, integral_err, derivative_err):
        self.rotation_speed = prop_gain * error + int_gain * integral_err + diff_gain * derivative_err
        self.angle += self.rotation_speed * time_step
        self.x += self.velocity * math.cos(math.radians(self.angle)) * time_step
        self.y += self.velocity * math.sin(math.radians(self.angle)) * time_step

    def draw_bot(self, screen):
        length = 25
        ang_rad = math.radians(self.angle)
        points = [
            (self.x + length * math.cos(ang_rad), self.y + length * math.sin(ang_rad)),
            (self.x + length * 0.5 * math.cos(ang_rad + 140 * math.pi/180),
             self.y + length * 0.5 * math.sin(ang_rad + 140 * math.pi/180)),
            (self.x + length * 0.5 * math.cos(ang_rad - 140 * math.pi/180),
             self.y + length * 0.5 * math.sin(ang_rad - 140 * math.pi/180))
        ]
        pygame.draw.polygon(screen, color_blue, points)

def run():
    clock = pygame.time.Clock()
    bot = Bot(400, 300, 0)

    previous_error = 0
    integral_error = 0

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        sensor_val = bot.read_sensor()
        error = target_level - sensor_val
        integral_error += error * time_step
        derivative_error = (error - previous_error) / time_step
        previous_error = error

        bot.update_motion(error, integral_error, derivative_error)

        screen.fill(color_white)
        bot.draw_bot(screen)

        info_text = font.render(f"Сенсор: {sensor_val:.1f} Ошибка: {error:.1f} Поворот: {bot.rotation_speed:.2f}", True, color_green)
        screen.blit(info_text, (10, 10))

        pygame.display.flip()
        clock.tick(fps)

    pygame.quit()

if __name__ == "__main__":
    run()
